Avançando em tipos do TypeScript



Arrays:

- Podemos especificar um array como tipo tambem;
- Se temos um array de numeros: number[];
- Se é um array de string: string[];
- Isso acontece pois geralmente os arrays possuem apenas um unico tipo de dados entre seus itens;
- O tipo any (
    - O any transmite ao TypeScript que qualquer tipo satisfaz a variavel;
    - Devemos eveitar ao maximo usar este tipo, pois vai contra os principios do TypeScript;
    - Dois casos de usos: o tipo de dado realmente nao importa e arrays com dadosde multiplos tipos;
    );


Tipo de parametro de funções:

- Podemos definer o tipo de cada parametro de uma função;
- Assim condicionamos o seu uso correto;
- A sintaxe é: function minhaFuncao(nome: string) {};
- Agora podemos passar o parametro nome, apenas como texto;
    

Tipo de retorno de funções:

- Os retornos tambem podem ser definidos por nos;
- Para isso utilizaremos a sintaxe: function myFunction(): number {};
- Essas função retorna um numero;


Funções anonimas em TypeScript:

- O TypeScript consegue nos ajudar tambem em funções anonimas;
- Fazendo uma validação do codigo digitado, nos fornecendo dicas de possiveis problemas;
- Exemplo: metodos nao existentes;


Tipos de objetos:

- Podemos determinar tipos para objetos tambem;
- A sintaxe é: {prop: tipo, prop2: tipo2};
- Ou seja, estamos determinando quais tipos as propriedades de um objeto possuem;


Propriedades opcionais:

- Nem sempre os objetos possuem todas as propriedades que poderiam possuir;
- Por isso temos as propriedades opcionais;
- Para ter esse resultado devemos colocar uma interrogação: {nome: string, sobrenome?: string}


Validacao de props opcionais:

- Quando a propriedade é opcional, precisamos criar uma validação;
- Isso acontece porque o TypeScript não nos ajuda mais, ja que ele deixa de controlar o valor que recebemos;
- Para isto utilizamos uma condicional if, e conseguimos resolver a situação;


Union types:

- O Union type é uma alternativa melhor que o any;
- Onde podemos determinar dois tios para um dado;
- A sintaxe: number | string;


Avançando em Union types:

- Podemos utilizar condicionais para validação do tipo de union types;
- Com isso é possivel trilhar rumos diferentes, baseado no tipo de dado;
- Para checar o tipo utilzamos typeof;


Type alias:

- Type alias é um recurso que permite criar um tipo e determinar o que ele verifica;
- Desta maneira temos uma maneira mais facil de chama-lo em vez de criar expressoes complexas com Union types, por exemplo;


Introdução às interfaces:

- Uma outra maneira de nomear um tipo de objeto;
- Podemos determinar um nome para o tipo;
- E tambem escolher quais as propriedades e seus tipos;


Diferença entre type alias e interfaces:

- Na maioria das vezes podemos optar entre qualquer um dos recursos sem problemas;
- A unica diferença é que a interface pode ser alterada ao longo do codigo, ja o alias não;
- Ou seja, se pretendemos mudar como o tipo de comporta, devemos escolher a Interface;


Literal types:

- Literal types é um recurso que permite colocar valores como tipos;
- Isso restringe o uso a não só tipos, como tambem os proprios valores;
- Este recurso é muito utilizado com o unio types;


Non-null Assertion Operator

- As vezes o TypeScript pode evidenciar um erro, baseado em um valor que no momento do codigo ainda nao esta disponivel;
- Porem se sabemos que este valor sera preenchido, podemos evitar o erro, Utilizando o caractere !;


Bigint

- Com o tipo bigint podemos declarar números com valores muito altos;
- Podemos utilizar a notação literal, exemplo: 100n;
- Para este recurso precisamos mudar a configuração do TypeScript, para a versao minima de ES2020;


Symbol

- De forma resumida, o Symbol cria uma referencia unica para um valor;
- Ou seja, mesmo que ela possua o mesmo valor de outra variavel teremos valores sendo considerados diferentes;


